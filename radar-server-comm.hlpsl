%%% A = "radar role"
%%% B => "server role"
%%% A -> B: {A.B.Na}_Kb
%%% B -> A: {A.B.Na.s}_Ka 
%%% {A.B.Na'.AskInfra'}_Ka
%%% A -> 
role radar(A:agent, B:agent, Ka:public_key, Kb:public_key, SND, RCV:channel(dy))
played_by A
def=
	local
		State:nat, Na:text, AskInfra:text, NumberInfra:text
	init
		State := 0
	transition
		0. State=0 /\ RCV(start) =|>
           State':=1 /\ Na':=new()
            /\ SND({A.B.Na'}_Kb)

		1. State=1 /\ RCV({A.B.Na.AskInfra'}_Ka) =|>
           State':=2 /\ NumberInfra':=new()
            /\ SND({A.B.Na.NumberInfra'}_Ka)
            /\ secret(NumberInfra',sec_1,{A,B})
            /\ witness(A,B,auth_1,Na)

end role

role server(B:agent, A:agent, Ka:public_key, Kb:public_key, SND, RCV:channel(dy))
played_by B
def=
	local
		State:nat, Na:text, AskInfra:text, NumberInfra:text
	init
		State := 0
	transition
		0. State=0 /\ RCV({A.B.Na'}_Kb) =|>
           State':=1 /\ AskInfra':=new()
            /\ SND({A.B.Na'.AskInfra'}_Ka)
            /\ secret(AskInfra',sec_1,{A,B})
            /\ witness(B,A,auth_1,Na')
                   
        1. State=1 /\ RCV({A.B.Na'.NumberInfra'}_Ka) =|>
            State':=2 /\ request(B,A,auth_1,Na')

end role

role session(A:agent, B:agent, S1:text, Ka:public_key, Kb:public_key)
def=
	local
		SND2, RCV2, SND1, RCV1:channel(dy)
	composition
		server(B,A,Ka,Kb,SND2,RCV2) /\ radar(A,B,Ka,Kb,SND1,RCV1)
end role

role environment()
def=
	const ka, kb:public_key,
	      server, radar:agent,
	      s1:text, 
	      sec_1, auth_1:protocol_id

	intruder_knowledge = {radar,server,ka,kb}
	composition
		session(radar,server,s1,ka,kb) /\ session(radar,server,s1,ka,kb)
end role

goal
	secrecy_of sec_1
    authentication_on auth_1
end goal

environment()
